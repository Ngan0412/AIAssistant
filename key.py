
from cryptography.fernet import Fernet
import base64
import hashlib
import getpass

def ask_password_and_decrypt_key(encrypted_api_key_b64: str) -> str:
    """
    Nh·∫≠p m·∫≠t kh·∫©u, d√πng ƒë·ªÉ gi·∫£i m√£ API key ƒë√£ m√£ h√≥a tr∆∞·ªõc ƒë√≥.

    :param encrypted_api_key_b64: chu·ªói API key ƒë√£ ƒë∆∞·ª£c m√£ h√≥a (base64 string)
    :return: chu·ªói API key g·ªëc (plaintext)
    """
    try:
        # Nh·∫≠p m·∫≠t kh·∫©u (kh√¥ng hi·ªÉn th·ªã tr√™n m√†n h√¨nh)
        password = getpass.getpass("üîë Nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ gi·∫£i m√£ API Key: ")

        # T·∫°o key h·ª£p l·ªá t·ª´ m·∫≠t kh·∫©u
        key = base64.urlsafe_b64encode(hashlib.sha256(password.encode()).digest())

        # Kh·ªüi t·∫°o Fernet v·ªõi key t·ª´ m·∫≠t kh·∫©u
        f = Fernet(key)

        # Gi·∫£i m√£ chu·ªói ƒë√£ m√£ h√≥a
        decrypted_api_key = f.decrypt(encrypted_api_key_b64.encode()).decode()
        print("‚úÖ Gi·∫£i m√£ th√†nh c√¥ng.")
        print(decrypted_api_key)

        return decrypted_api_key

    except Exception as e:
        print("‚ùå Gi·∫£i m√£ th·∫•t b·∫°i. C√≥ th·ªÉ m·∫≠t kh·∫©u sai.")
        raise e
    
encrypted_api_key = "gAAAAABog0FSo-Xam59eQZgtSuFnOmEDi4RLoZwvLX4bbvicn0rVM5814RtRNlTOZskoXuotOGv5eOjxrBglt6qtWu2wFzIQZImosqWm83vjdWul4szncWushwiZs01OMv9GWR-c_O9xx503jFDaOrgEXaE-Rr9wYigVwgqB73jOJpOugC8DM5U="  # b·∫°n d√°n v√†o ƒë√¢y

# Gi·∫£i m√£ khi ch·∫°y
OPENROUTER_API_KEY = ask_password_and_decrypt_key(encrypted_api_key)